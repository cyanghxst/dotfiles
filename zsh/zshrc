# ----------------------------------------
# General
# ----------------------------------------

# Emacs key bindings
bindkey -e
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

# ----------------------------------------
# History
# ----------------------------------------

HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase

setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

# ----------------------------------------
# Environment Variables
# ----------------------------------------

export TERM="xterm-kitty"

# ----------------------------------------
# Aliases
# ----------------------------------------

alias ls='\ls -Glh'
alias lst='\ls -Glth'
alias lsd='\ls -Gldh .*'
alias lsdt='\ls -Gldth .*'
alias cdc='cd && clear'
alias cdd='cd ~/Downloads && ls'
alias cdf='cd $(find . ! -name ".*" -maxdepth 1 -type d | sort | fzf)'
alias cf='cd $(find . -type d -not -path "./.*" -not -path "./.git" | sed "s|^\./||" | sort | fzf)'
alias dirs='dirs -v'
alias gcc='gcc-14'
alias g++='g++-14'
alias reset='unset NEW_LINE_BEFORE_PROMPT && reset'
alias forsay='\fortune > a.txt | cowsay && say -f a.txt && rm a.txt'
alias fortune='fortune | cowsay'
alias pipes.sh='pipes.sh | lolcat'
alias nf='fzf --print0 | xargs -0 -o nvim'
alias of='fzf --print0 | xargs -0 -o open'
alias keka='/Applications/Keka.app/Contents/MacOS/Keka --cli'
alias gg='git-graph --style round'
alias tm='transmission-cli'
alias venv='source ~/.venv/bin/activate'
alias zsh='source ~/.zshrc'

# ----------------------------------------
# Custom functions
# ----------------------------------------

mkcd() {
    if [ -z "$1" ]; then
        echo "mkcd: enter a directory name"
        return 1
    elif [ -d "$1" ]; then
        echo "mkcd: '$1' already exists"
        cd "$1" || return 1
    else
        mkdir -p "$1" && cd "$1" || return 1
    fi
}

jvr() { javac "$1" && java "${1%.*}" }
co() { g++ -std=c++17 -O2 "$1" -o "${1%.*}" -Wall; }
run() { co "$1" && ./"${1%.*}" & fg; }
wine-gptk() { WINEESYNC=1 WINEPREFIX=~/my-game-prefix $(brew --prefix game-porting-toolkit)/bin/wine64 "$@" }

# ----------------------------------------
# Fzf color options
# ----------------------------------------

export FZF_DEFAULT_OPTS='
--height=40% --layout=reverse --info=inline --border --margin=1 --padding=1
--color=fg:#c0caf5,fg+:#16161e
--pointer=">"
--color=bg:-1,bg+:#9ece6a
--color=hl:#fa2d90,hl+:#16161e
--color=gutter:#414868
--color=scrollbar:#414868
--color=info:#9ece6a,pointer:#16161e
--color=border:#414868,spinner:#7aa2f7,header:#7E8E91,marker:#F92672,prompt:#9ece6a'

# ----------------------------------------
# List colors settings
# ----------------------------------------

export LS_COLORS="di=34:ln=35:so=32:pi=33:ex=31:bd=46;30:cd=43;30:su=37;41:sg=30;43:tw=30;42:ow=34;42:"

# ----------------------------------------
# Tab Completion Settings
# ----------------------------------------

zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
autoload -Uz compinit && compinit -C

# ----------------------------------------
# Prompt Settings
# ----------------------------------------

function precmd() {
    if [ -z "$NEW_LINE_BEFORE_PROMPT" ]; then
        NEW_LINE_BEFORE_PROMPT=1
    elif [ "$NEW_LINE_BEFORE_PROMPT" -eq 1 ]; then
        echo ""
    fi
}

# ----------------------------------------
# Manual Page Settings
# ----------------------------------------

export LESS_TERMCAP_mb=$(tput bold; tput setaf 2) # green
export LESS_TERMCAP_md=$(tput bold; tput setaf 2) # green
export LESS_TERMCAP_so=$(tput bold; tput rev; tput setaf 3) # yellow
export LESS_TERMCAP_se=$(tput rmso; tput sgr0)
export LESS_TERMCAP_us=$(tput smul; tput setaf 4) # blue
export LESS_TERMCAP_me=$(tput sgr0)

# ----------------------------------------
# Josh Dick's zsh prompt
# ---------------------------------------

setopt prompt_subst
autoload -U colors && colors

ssh_info() {
    [[ "$SSH_CONNECTION" != '' ]] && echo '%(!.%{$fg[red]%}.%{$fg[yellow]%})%n%{$reset_color%}@%{$fg[green]%}%m%{$reset_color%}:' || echo ''
}

git_info() {
    ! git rev-parse --is-inside-work-tree > /dev/null 2>&1 && return

    local GIT_LOCATION=${$(git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD)#(refs/heads/|tags/)}

    local AHEAD="%F{#456841}+NUM%{$reset_color%}"
    local BEHIND="%F{#684141}-NUM%{$reset_color%}"
    local MERGING="%F{#614168}󱐌%{$reset_color%}"
    local UNTRACKED="%F{#684141}%{$reset_color%}"
    local MODIFIED="%F{#676841}%{$reset_color%}"
    local STAGED="%F{#456841}%{$reset_color%}"

    local -a DIVERGENCES
    local -a FLAGS

    local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
    if [ "$NUM_AHEAD" -gt 0 ]; then
        DIVERGENCES+=( "${AHEAD//NUM/$NUM_AHEAD}" )
    fi

    local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
    if [ "$NUM_BEHIND" -gt 0 ]; then
        DIVERGENCES+=( "${BEHIND//NUM/$NUM_BEHIND}" )
    fi

    local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
    if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
        FLAGS+=( "$MERGING" )
    fi

    if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
        FLAGS+=( "$UNTRACKED" )
    fi

    if ! git diff --quiet 2> /dev/null; then
        FLAGS+=( "$MODIFIED" )
    fi

    if ! git diff --cached --quiet 2> /dev/null; then
        FLAGS+=( "$STAGED" )
    fi

    local -a GIT_INFO
    GIT_INFO+=( "%F{#414868}on%{$reset_color%}" )
    [[ ${#FLAGS[@]} -ne 0 ]] && GIT_INFO+=( "${(j::)FLAGS}" )
    GIT_INFO+=( "%F{#414868}$GIT_LOCATION%{$reset_color%}" )
    [ -n "$GIT_STATUS" ] && GIT_INFO+=( "$GIT_STATUS" )
    [[ ${#DIVERGENCES[@]} -ne 0 ]] && GIT_INFO+=( "${(j::)DIVERGENCES}" )
    echo "${(j: :)GIT_INFO}"
}

PS1='$(ssh_info)%F{#414868}%~%u $(git_info)
%(?.%F{#c0caf5}.%F{#f7768e})%(!.#.󱐋)%{$reset_color%} '

# ----------------------------------------
# Source
# ----------------------------------------

# Source zsh-syntax-highlighting
source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Source zsh-autosuggestions
source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh

# mise
eval "$(mise activate zsh)"
